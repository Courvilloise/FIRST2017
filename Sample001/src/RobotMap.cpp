// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::vehiclePMW2LeftEngine;
std::shared_ptr<SpeedController> RobotMap::vehiclePMW0LeftEngine;
std::shared_ptr<SpeedController> RobotMap::vehiclePMW3RightEngine;
std::shared_ptr<SpeedController> RobotMap::vehiclePMW1RightEngine;
std::shared_ptr<SpeedController> RobotMap::catapultPMW4AgitatorEngine;
std::shared_ptr<CANTalon> RobotMap::catapultCAN1ThrowEngine;
std::shared_ptr<SpeedController> RobotMap::winchPMW5WinchEngine;
std::shared_ptr<SpeedController> RobotMap::winchPMW6WinchEngine;
std::shared_ptr<DigitalInput> RobotMap::geargateD0LimitOpenSwitch;
std::shared_ptr<DigitalInput> RobotMap::geargateD1LimitCloseSwitch;
std::shared_ptr<SpeedController> RobotMap::geargatePMW4GateEngine;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION



void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    vehiclePMW2LeftEngine.reset(new VictorSP(2));
    lw->AddActuator("Vehicle", "PMW2LeftEngine", std::static_pointer_cast<VictorSP>(vehiclePMW2LeftEngine));
    
    vehiclePMW0LeftEngine.reset(new VictorSP(0));
    lw->AddActuator("Vehicle", "PMW0LeftEngine", std::static_pointer_cast<VictorSP>(vehiclePMW0LeftEngine));
    
    vehiclePMW3RightEngine.reset(new VictorSP(3));
    lw->AddActuator("Vehicle", "PMW3RightEngine", std::static_pointer_cast<VictorSP>(vehiclePMW3RightEngine));
    
    vehiclePMW1RightEngine.reset(new VictorSP(1));
    lw->AddActuator("Vehicle", "PMW1RightEngine", std::static_pointer_cast<VictorSP>(vehiclePMW1RightEngine));
    
    catapultPMW4AgitatorEngine.reset(new VictorSP(7));
    lw->AddActuator("Catapult", "PMW4AgitatorEngine", std::static_pointer_cast<VictorSP>(catapultPMW4AgitatorEngine));
    
    catapultCAN1ThrowEngine.reset(new CANTalon(1));
    lw->AddActuator("Catapult", "CAN1ThrowEngine", catapultCAN1ThrowEngine);
    
    winchPMW5WinchEngine.reset(new VictorSP(5));
    lw->AddActuator("Winch", "PMW5WinchEngine", std::static_pointer_cast<VictorSP>(winchPMW5WinchEngine));
    
    winchPMW6WinchEngine.reset(new VictorSP(6));
    lw->AddActuator("Winch", "PMW6WinchEngine", std::static_pointer_cast<VictorSP>(winchPMW6WinchEngine));
    
    geargateD0LimitOpenSwitch.reset(new DigitalInput(0));
    lw->AddSensor("Geargate", "D0LimitOpenSwitch", geargateD0LimitOpenSwitch);
    
    geargateD1LimitCloseSwitch.reset(new DigitalInput(1));
    lw->AddSensor("Geargate", "D1LimitCloseSwitch", geargateD1LimitCloseSwitch);
    
    geargatePMW4GateEngine.reset(new VictorSP(4));
    lw->AddActuator("Geargate", "PMW4GateEngine", std::static_pointer_cast<VictorSP>(geargatePMW4GateEngine));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
