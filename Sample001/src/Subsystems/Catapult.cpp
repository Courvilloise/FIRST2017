// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Catapult.h"
#include "../RobotMap.h"
#include "../ActionsRecorder.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Catapult::Catapult() : Subsystem("Catapult") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    pMW4AgitatorEngine = RobotMap::catapultPMW4AgitatorEngine;
    cAN1ThrowEngine = RobotMap::catapultCAN1ThrowEngine;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    currentBallSpeed = 0.0f;
    currentAgitatorSpeed = 0.0f;
	savedSpeed = 0.0f;
	valueSaved = false;

	// Stop the recorder
	ActionsRecorder::GetInstance()->StopRecord();

	//pCAN1ThrowEngine->SetControlMode(CANTalon::kDisabled);
	Stop();
}

void Catapult::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Specify the speed of the motor that throw balls. Range between 0.0 to 1.0
void Catapult::SetRotationSpeed(double ballSpeed, double agitatorSpeed)
{
	// Make sur the value are in a valid range
	if (ballSpeed < 0.0f)
		ballSpeed = 0.0f;
	else if (ballSpeed > 1.0f)
		ballSpeed = 1.0f;

	cAN1ThrowEngine->Set(ballSpeed);

	// If we have enough speed, we should start the agitator;
	if (std::abs(ballSpeed) > 0.01f)
	{
		pMW4AgitatorEngine->Set(agitatorSpeed);
	}
	else
	{
		pMW4AgitatorEngine->Set(0.0f);
	}

	// We will record a new command only if the speeds changes
	if ((currentBallSpeed != ballSpeed) ||
	    (currentAgitatorSpeed != agitatorSpeed))
	{
		currentBallSpeed = ballSpeed;
		currentAgitatorSpeed = agitatorSpeed;

		ActionsRecorder::GetInstance()->RecordCommand(FUNC_CATAPULT_SETROTATIONSPEED, currentBallSpeed, currentAgitatorSpeed);
	}
}

// Increase (or decrase) the current speed by a specific delta. Range between -1.0 to 1.0
void Catapult::IncreaseSpeed(double delta)
{
	SetRotationSpeed(currentBallSpeed + delta);
}

// Completely stop the motor that throw balls
void Catapult::Stop()
{
	currentBallSpeed = 0.0f;
	currentAgitatorSpeed = 0.0f;

	cAN1ThrowEngine->Set(currentBallSpeed);
	pMW4AgitatorEngine->Set(currentAgitatorSpeed);

	ActionsRecorder::GetInstance()->RecordCommand(FUNC_CATAPULT_STOP, currentBallSpeed, currentAgitatorSpeed);
}

// Stop the motor of the agitator only
void Catapult::StopAgitator()
{
	pMW4AgitatorEngine->Set(0.0f);
}


// Save the current speed
void Catapult::SaveCurrentSpeed()
{
	// We copy the current speed in our a memory.. :)
	savedSpeed = currentBallSpeed;
	valueSaved = true;
}

// Restore the speed with the previous value.
void Catapult::RestoreSavedSpeed(double defaultSpeed)
{
	// If no previous value saved, we will apply the default speed
	if (!valueSaved || (savedSpeed == 0.0f))
	{
		SetRotationSpeed(defaultSpeed);
		return;
	}

	SetRotationSpeed(savedSpeed);
}

