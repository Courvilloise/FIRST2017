// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "GamePadDrive.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

GamePadDrive::GamePadDrive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::vehicle.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void GamePadDrive::Initialize() {
	pJoystick = Robot::oi->getJoystick();
	int nAxis = pJoystick->GetAxisCount();
	printf("Number of Gamepad axis = %d\n", nAxis);
}

// Called repeatedly when this Command is scheduled to run
void GamePadDrive::Execute() {

	// Used to turn: coefficient (0% to 100% applied on the left and right speed).
	// 0% will fully break the speed (full break).
	// 100% will not break at all the speed
	double leftSpeedCoef = 1.0f;
	double rightSpeedCoef = 1.0f;

	// Get the forward speed (0-1.0)
	// We have to convert a Raw Axis between -1 (not pressed) and +1 to an speed between 0 and 1.0
	double forwadSpeed = (pJoystick->GetRawAxis(3) + 1.0f) / 2.0f;

	// Get the reverse speed (0-1.0)
	// We have to convert a Raw Axis between -1 (not pressed) and +1 to an speed between 0 and 1.0
	double reverseSpeed = (pJoystick->GetRawAxis(4) + 1.0f) / 2.0f;

	// Real speed (the player can press forward and reverse in the same time to speed-up the transition)
	double realSpeed = forwadSpeed - reverseSpeed;

	// Get the direction of the wheel (between -1.0 (full left) to +1.0 (full right))
	double direction = pJoystick->GetRawAxis(0);

	//We like to turn on left (we have to break the left side)
	leftSpeedCoef = (direction < 0.0f ? 1.0f + direction : leftSpeedCoef);
	rightSpeedCoef = (direction > 0.0f ? 1.0f - direction : rightSpeedCoef);

	// Apply the speed on the vehicle
	(Robot::vehicle.get())->Move(realSpeed * leftSpeedCoef, realSpeed * rightSpeedCoef);
}

// Make this return true when this Command no longer needs to run execute()
bool GamePadDrive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void GamePadDrive::End() {
	(Robot::vehicle.get())->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void GamePadDrive::Interrupted() {

}
